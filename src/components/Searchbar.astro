---
import { pattern } from '../utils/validateUrl';

interface Props {
    defaultInput: string;
    error: string;
}

const { defaultInput, error } = Astro.props;
---

<form role="search" data-search-form>
    <label class="url-input-label" for="searchbar">Put a Spotify song URL here</label>
    <div class="search-group">
        <div class="input-group">
            <input
                type="text"
                autocomplete="off"
                placeholder="https://open.spotify.com/track/..."
                class="url-input"
                name="url"
                id="searchbar"
                value={defaultInput}
                pattern={pattern.source}
                required
                data-search-textbox
            />
            <button type="reset" class="round-button clear-button" data-search-clear>
                <span class="sr-only">Clear</span>
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke-width="1.5"
                    stroke="currentColor"
                >
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
        <button type="submit" class="search-button" data-search-button>
            <span class="sr-only">Search</span>
            <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="currentColor"
                class="not-loading"
            >
                <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"></path>
            </svg>
            <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="currentColor"
                class="loading"
            >
                <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99"
                ></path>
            </svg>
        </button>
    </div>
    <div class="url-input-label" aria-live="polite" data-search-error>
        {error}
    </div>
</form>

<script>
    const errorField = document.querySelector('[data-search-error]');
    const clearButton = document.querySelector('[data-search-clear]');
    const searchbox = document.querySelector('[data-search-textbox]') as HTMLInputElement | null;
    if (errorField && searchbox) {
        searchbox.addEventListener('input', () => {
            errorField.innerHTML = '';
        });
    }
    if (clearButton && searchbox) {
        clearButton.addEventListener('click', (event) => {
            // We can't just use native reset functionality,
            // because if page was openned with Spotify song
            // already specified, default value is that song's url
            event.preventDefault();
            searchbox.value = '';
        });
    }
</script>

<style>
    form {
        width: 100%;
    }

    .search-group {
        height: 4rem;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
    }

    .input-group {
        flex: 1;
        width: 50rem;
        height: 100%;
        position: relative;
        display: flex;
        place-items: center;
    }

    .url-input {
        background-color: #333;
        color: #fff;
        font-size: 1rem;
        font-weight: 500;
        padding: 0 3rem 0 1rem;
        width: 100%;
        height: 100%;
        border-radius: 9999px;
        border: none;
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }

    .url-input:disabled {
        color: #aaa;
    }

    .url-input:placeholder-shown + .clear-button {
        display: none;
    }

    .clear-button {
        position: absolute;
        right: 0.5rem;
    }

    .url-input-label {
        font-size: 1rem;
        font-weight: 600;
        padding: 0 1rem;
    }

    .search-button {
        aspect-ratio: 1/1;
        background-color: #1ed760;
        color: black;
        padding-right: 0.5rem;
        height: 100%;
        border-radius: 9999px;
        border: none;
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
    }

    .search-button:hover,
    .search-button:focus {
        background-color: #1cb852;
        cursor: pointer;
    }

    @keyframes spin {
        from {
            transform: rotate(0deg);
        }
        to {
            transform: rotate(360deg);
        }
    }

    .search-button[aria-busy='true'] > .loading {
        animation: spin 2s linear infinite;
        display: inline;
    }

    .search-button > .loading {
        display: none;
    }

    .search-button[aria-busy='true'] > .not-loading {
        display: none;
    }

    .search-button > svg {
        width: 2rem;
        height: 2rem;
    }
</style>
